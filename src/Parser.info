-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.4 from Parser.y
-----------------------------------------------------------------------------

state 0 contains 1 shift/reduce conflicts.
state 7 contains 1 shift/reduce conflicts.
state 32 contains 3 shift/reduce conflicts.
state 34 contains 3 shift/reduce conflicts.
state 35 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_prepParser -> ListOfSequents                (0)
	ListOfSequents -> ProofLine                        (1)
	ListOfSequents -> ProofLine ListOfSequents         (2)
	ProofLine -> Assumptions '(' num ')' Formulae RuleReference   (3)
	ProofLine -> '(' num ')' Formulae RuleReference    (4)
	Assumptions ->                                     (5)
	Assumptions -> num ',' Assumptions                 (6)
	Formulae -> Formulae '->' Formulae                 (7)
	Formulae -> Formulae and Formulae                  (8)
	Formulae -> Formulae or Formulae                   (9)
	Formulae -> '(' Formulae ')'                       (10)
	Formulae -> not '(' Formulae ')'                   (11)
	Formulae -> var                                    (12)
	Formulae -> not var                                (13)
	Formulae -> bad                                    (14)
	RuleReference -> A                                 (15)
	RuleReference -> num ',' num and I                 (16)
	RuleReference -> num and E                         (17)
	RuleReference -> num ',' num '->' E                (18)
	RuleReference -> num '[' num ']' '->' I            (19)
	RuleReference -> num '[' ']' '->' I                (20)
	RuleReference -> num ',' num '[' num ']' RAA       (21)
	RuleReference -> num ',' num '[' ']' RAA           (22)
	RuleReference -> num '[' num ']' not I             (23)
	RuleReference -> num '[' ']' not I                 (24)
	RuleReference -> not E                             (25)
	RuleReference -> num not not E                     (26)
	RuleReference -> num ',' num '[' num ']' ',' num '[' num ']' or E   (27)
	RuleReference -> num or I                          (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	var            { Variable $$ }
	num            { Number $$ }
	'('            { LeftParen }
	')'            { RightParen }
	'->'           { Implies }
	and            { And }
	'['            { LeftBrace }
	']'            { RightBrace }
	','            { Comma }
	A              { Assump }
	E              { Elimination }
	I              { Introduction }
	not            { Negation }
	RAA            { Absurd }
	or             { Or }
	bad            { Bad }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_prepParser rule  0
	ListOfSequents  rules 1, 2
	ProofLine       rules 3, 4
	Assumptions     rules 5, 6
	Formulae        rules 7, 8, 9, 10, 11, 12, 13, 14
	RuleReference   rules 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	num            shift, and enter state 4
	'('            shift, and enter state 5
			(reduce using rule 5)


	ListOfSequents goto state 6
	ProofLine      goto state 7
	Assumptions    goto state 3

State 1


	num            shift, and enter state 4
	'('            shift, and enter state 5

	ProofLine      goto state 2
	Assumptions    goto state 3

State 2

	ListOfSequents -> ProofLine .                       (rule 1)



State 3

	ProofLine -> Assumptions . '(' num ')' Formulae RuleReference    (rule 3)

	'('            shift, and enter state 11


State 4

	Assumptions -> num . ',' Assumptions                (rule 6)

	','            shift, and enter state 10


State 5

	ProofLine -> '(' . num ')' Formulae RuleReference    (rule 4)

	num            shift, and enter state 9


State 6

	%start_prepParser -> ListOfSequents .               (rule 0)

	%eof           accept


State 7

	ListOfSequents -> ProofLine .                       (rule 1)
	ListOfSequents -> ProofLine . ListOfSequents        (rule 2)

	num            shift, and enter state 4
	'('            shift, and enter state 5
			(reduce using rule 5)

	%eof           reduce using rule 1

	ListOfSequents goto state 8
	ProofLine      goto state 7
	Assumptions    goto state 3

State 8

	ListOfSequents -> ProofLine ListOfSequents .        (rule 2)

	%eof           reduce using rule 2


State 9

	ProofLine -> '(' num . ')' Formulae RuleReference    (rule 4)

	')'            shift, and enter state 14


State 10

	Assumptions -> num ',' . Assumptions                (rule 6)

	num            shift, and enter state 4
	'('            reduce using rule 5

	Assumptions    goto state 13

State 11

	ProofLine -> Assumptions '(' . num ')' Formulae RuleReference    (rule 3)

	num            shift, and enter state 12


State 12

	ProofLine -> Assumptions '(' num . ')' Formulae RuleReference    (rule 3)

	')'            shift, and enter state 20


State 13

	Assumptions -> num ',' Assumptions .                (rule 6)

	'('            reduce using rule 6


State 14

	ProofLine -> '(' num ')' . Formulae RuleReference    (rule 4)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 15

State 15

	ProofLine -> '(' num ')' Formulae . RuleReference    (rule 4)
	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)

	num            shift, and enter state 26
	'->'           shift, and enter state 27
	and            shift, and enter state 28
	A              shift, and enter state 29
	not            shift, and enter state 30
	or             shift, and enter state 31

	RuleReference  goto state 25

State 16

	Formulae -> var .                                   (rule 12)

	num            reduce using rule 12
	')'            reduce using rule 12
	'->'           reduce using rule 12
	and            reduce using rule 12
	A              reduce using rule 12
	not            reduce using rule 12
	or             reduce using rule 12


State 17

	Formulae -> '(' . Formulae ')'                      (rule 10)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 24

State 18

	Formulae -> not . '(' Formulae ')'                  (rule 11)
	Formulae -> not . var                               (rule 13)

	var            shift, and enter state 22
	'('            shift, and enter state 23


State 19

	Formulae -> bad .                                   (rule 14)

	num            reduce using rule 14
	')'            reduce using rule 14
	'->'           reduce using rule 14
	and            reduce using rule 14
	A              reduce using rule 14
	not            reduce using rule 14
	or             reduce using rule 14


State 20

	ProofLine -> Assumptions '(' num ')' . Formulae RuleReference    (rule 3)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 21

State 21

	ProofLine -> Assumptions '(' num ')' Formulae . RuleReference    (rule 3)
	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)

	num            shift, and enter state 26
	'->'           shift, and enter state 27
	and            shift, and enter state 28
	A              shift, and enter state 29
	not            shift, and enter state 30
	or             shift, and enter state 31

	RuleReference  goto state 43

State 22

	Formulae -> not var .                               (rule 13)

	num            reduce using rule 13
	')'            reduce using rule 13
	'->'           reduce using rule 13
	and            reduce using rule 13
	A              reduce using rule 13
	not            reduce using rule 13
	or             reduce using rule 13


State 23

	Formulae -> not '(' . Formulae ')'                  (rule 11)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 42

State 24

	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)
	Formulae -> '(' Formulae . ')'                      (rule 10)

	')'            shift, and enter state 41
	'->'           shift, and enter state 27
	and            shift, and enter state 28
	or             shift, and enter state 31


State 25

	ProofLine -> '(' num ')' Formulae RuleReference .    (rule 4)

	num            reduce using rule 4
	'('            reduce using rule 4
	%eof           reduce using rule 4


State 26

	RuleReference -> num . ',' num and I                (rule 16)
	RuleReference -> num . and E                        (rule 17)
	RuleReference -> num . ',' num '->' E               (rule 18)
	RuleReference -> num . '[' num ']' '->' I           (rule 19)
	RuleReference -> num . '[' ']' '->' I               (rule 20)
	RuleReference -> num . ',' num '[' num ']' RAA      (rule 21)
	RuleReference -> num . ',' num '[' ']' RAA          (rule 22)
	RuleReference -> num . '[' num ']' not I            (rule 23)
	RuleReference -> num . '[' ']' not I                (rule 24)
	RuleReference -> num . not not E                    (rule 26)
	RuleReference -> num . ',' num '[' num ']' ',' num '[' num ']' or E    (rule 27)
	RuleReference -> num . or I                         (rule 28)

	and            shift, and enter state 36
	'['            shift, and enter state 37
	','            shift, and enter state 38
	not            shift, and enter state 39
	or             shift, and enter state 40


State 27

	Formulae -> Formulae '->' . Formulae                (rule 7)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 35

State 28

	Formulae -> Formulae and . Formulae                 (rule 8)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 34

State 29

	RuleReference -> A .                                (rule 15)

	num            reduce using rule 15
	'('            reduce using rule 15
	%eof           reduce using rule 15


State 30

	RuleReference -> not . E                            (rule 25)

	E              shift, and enter state 33


State 31

	Formulae -> Formulae or . Formulae                  (rule 9)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	not            shift, and enter state 18
	bad            shift, and enter state 19

	Formulae       goto state 32

State 32

	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)
	Formulae -> Formulae or Formulae .                  (rule 9)

	num            reduce using rule 9
	')'            reduce using rule 9
	'->'           shift, and enter state 27
			(reduce using rule 9)

	and            shift, and enter state 28
			(reduce using rule 9)

	A              reduce using rule 9
	not            reduce using rule 9
	or             shift, and enter state 31
			(reduce using rule 9)



State 33

	RuleReference -> not E .                            (rule 25)

	num            reduce using rule 25
	'('            reduce using rule 25
	%eof           reduce using rule 25


State 34

	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae and Formulae .                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)

	num            reduce using rule 8
	')'            reduce using rule 8
	'->'           shift, and enter state 27
			(reduce using rule 8)

	and            shift, and enter state 28
			(reduce using rule 8)

	A              reduce using rule 8
	not            reduce using rule 8
	or             shift, and enter state 31
			(reduce using rule 8)



State 35

	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae '->' Formulae .                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)

	num            reduce using rule 7
	')'            reduce using rule 7
	'->'           shift, and enter state 27
			(reduce using rule 7)

	and            shift, and enter state 28
			(reduce using rule 7)

	A              reduce using rule 7
	not            reduce using rule 7
	or             shift, and enter state 31
			(reduce using rule 7)



State 36

	RuleReference -> num and . E                        (rule 17)

	E              shift, and enter state 50


State 37

	RuleReference -> num '[' . num ']' '->' I           (rule 19)
	RuleReference -> num '[' . ']' '->' I               (rule 20)
	RuleReference -> num '[' . num ']' not I            (rule 23)
	RuleReference -> num '[' . ']' not I                (rule 24)

	num            shift, and enter state 48
	']'            shift, and enter state 49


State 38

	RuleReference -> num ',' . num and I                (rule 16)
	RuleReference -> num ',' . num '->' E               (rule 18)
	RuleReference -> num ',' . num '[' num ']' RAA      (rule 21)
	RuleReference -> num ',' . num '[' ']' RAA          (rule 22)
	RuleReference -> num ',' . num '[' num ']' ',' num '[' num ']' or E    (rule 27)

	num            shift, and enter state 47


State 39

	RuleReference -> num not . not E                    (rule 26)

	not            shift, and enter state 46


State 40

	RuleReference -> num or . I                         (rule 28)

	I              shift, and enter state 45


State 41

	Formulae -> '(' Formulae ')' .                      (rule 10)

	num            reduce using rule 10
	')'            reduce using rule 10
	'->'           reduce using rule 10
	and            reduce using rule 10
	A              reduce using rule 10
	not            reduce using rule 10
	or             reduce using rule 10


State 42

	Formulae -> Formulae . '->' Formulae                (rule 7)
	Formulae -> Formulae . and Formulae                 (rule 8)
	Formulae -> Formulae . or Formulae                  (rule 9)
	Formulae -> not '(' Formulae . ')'                  (rule 11)

	')'            shift, and enter state 44
	'->'           shift, and enter state 27
	and            shift, and enter state 28
	or             shift, and enter state 31


State 43

	ProofLine -> Assumptions '(' num ')' Formulae RuleReference .    (rule 3)

	num            reduce using rule 3
	'('            reduce using rule 3
	%eof           reduce using rule 3


State 44

	Formulae -> not '(' Formulae ')' .                  (rule 11)

	num            reduce using rule 11
	')'            reduce using rule 11
	'->'           reduce using rule 11
	and            reduce using rule 11
	A              reduce using rule 11
	not            reduce using rule 11
	or             reduce using rule 11


State 45

	RuleReference -> num or I .                         (rule 28)

	num            reduce using rule 28
	'('            reduce using rule 28
	%eof           reduce using rule 28


State 46

	RuleReference -> num not not . E                    (rule 26)

	E              shift, and enter state 57


State 47

	RuleReference -> num ',' num . and I                (rule 16)
	RuleReference -> num ',' num . '->' E               (rule 18)
	RuleReference -> num ',' num . '[' num ']' RAA      (rule 21)
	RuleReference -> num ',' num . '[' ']' RAA          (rule 22)
	RuleReference -> num ',' num . '[' num ']' ',' num '[' num ']' or E    (rule 27)

	'->'           shift, and enter state 54
	and            shift, and enter state 55
	'['            shift, and enter state 56


State 48

	RuleReference -> num '[' num . ']' '->' I           (rule 19)
	RuleReference -> num '[' num . ']' not I            (rule 23)

	']'            shift, and enter state 53


State 49

	RuleReference -> num '[' ']' . '->' I               (rule 20)
	RuleReference -> num '[' ']' . not I                (rule 24)

	'->'           shift, and enter state 51
	not            shift, and enter state 52


State 50

	RuleReference -> num and E .                        (rule 17)

	num            reduce using rule 17
	'('            reduce using rule 17
	%eof           reduce using rule 17


State 51

	RuleReference -> num '[' ']' '->' . I               (rule 20)

	I              shift, and enter state 65


State 52

	RuleReference -> num '[' ']' not . I                (rule 24)

	I              shift, and enter state 64


State 53

	RuleReference -> num '[' num ']' . '->' I           (rule 19)
	RuleReference -> num '[' num ']' . not I            (rule 23)

	'->'           shift, and enter state 62
	not            shift, and enter state 63


State 54

	RuleReference -> num ',' num '->' . E               (rule 18)

	E              shift, and enter state 61


State 55

	RuleReference -> num ',' num and . I                (rule 16)

	I              shift, and enter state 60


State 56

	RuleReference -> num ',' num '[' . num ']' RAA      (rule 21)
	RuleReference -> num ',' num '[' . ']' RAA          (rule 22)
	RuleReference -> num ',' num '[' . num ']' ',' num '[' num ']' or E    (rule 27)

	num            shift, and enter state 58
	']'            shift, and enter state 59


State 57

	RuleReference -> num not not E .                    (rule 26)

	num            reduce using rule 26
	'('            reduce using rule 26
	%eof           reduce using rule 26


State 58

	RuleReference -> num ',' num '[' num . ']' RAA      (rule 21)
	RuleReference -> num ',' num '[' num . ']' ',' num '[' num ']' or E    (rule 27)

	']'            shift, and enter state 69


State 59

	RuleReference -> num ',' num '[' ']' . RAA          (rule 22)

	RAA            shift, and enter state 68


State 60

	RuleReference -> num ',' num and I .                (rule 16)

	num            reduce using rule 16
	'('            reduce using rule 16
	%eof           reduce using rule 16


State 61

	RuleReference -> num ',' num '->' E .               (rule 18)

	num            reduce using rule 18
	'('            reduce using rule 18
	%eof           reduce using rule 18


State 62

	RuleReference -> num '[' num ']' '->' . I           (rule 19)

	I              shift, and enter state 67


State 63

	RuleReference -> num '[' num ']' not . I            (rule 23)

	I              shift, and enter state 66


State 64

	RuleReference -> num '[' ']' not I .                (rule 24)

	num            reduce using rule 24
	'('            reduce using rule 24
	%eof           reduce using rule 24


State 65

	RuleReference -> num '[' ']' '->' I .               (rule 20)

	num            reduce using rule 20
	'('            reduce using rule 20
	%eof           reduce using rule 20


State 66

	RuleReference -> num '[' num ']' not I .            (rule 23)

	num            reduce using rule 23
	'('            reduce using rule 23
	%eof           reduce using rule 23


State 67

	RuleReference -> num '[' num ']' '->' I .           (rule 19)

	num            reduce using rule 19
	'('            reduce using rule 19
	%eof           reduce using rule 19


State 68

	RuleReference -> num ',' num '[' ']' RAA .          (rule 22)

	num            reduce using rule 22
	'('            reduce using rule 22
	%eof           reduce using rule 22


State 69

	RuleReference -> num ',' num '[' num ']' . RAA      (rule 21)
	RuleReference -> num ',' num '[' num ']' . ',' num '[' num ']' or E    (rule 27)

	','            shift, and enter state 70
	RAA            shift, and enter state 71


State 70

	RuleReference -> num ',' num '[' num ']' ',' . num '[' num ']' or E    (rule 27)

	num            shift, and enter state 72


State 71

	RuleReference -> num ',' num '[' num ']' RAA .      (rule 21)

	num            reduce using rule 21
	'('            reduce using rule 21
	%eof           reduce using rule 21


State 72

	RuleReference -> num ',' num '[' num ']' ',' num . '[' num ']' or E    (rule 27)

	'['            shift, and enter state 73


State 73

	RuleReference -> num ',' num '[' num ']' ',' num '[' . num ']' or E    (rule 27)

	num            shift, and enter state 74


State 74

	RuleReference -> num ',' num '[' num ']' ',' num '[' num . ']' or E    (rule 27)

	']'            shift, and enter state 75


State 75

	RuleReference -> num ',' num '[' num ']' ',' num '[' num ']' . or E    (rule 27)

	or             shift, and enter state 76


State 76

	RuleReference -> num ',' num '[' num ']' ',' num '[' num ']' or . E    (rule 27)

	E              shift, and enter state 77


State 77

	RuleReference -> num ',' num '[' num ']' ',' num '[' num ']' or E .    (rule 27)

	num            reduce using rule 27
	'('            reduce using rule 27
	%eof           reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 16
Number of non-terminals: 6
Number of states: 78
